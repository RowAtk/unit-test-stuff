"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bunlder_1 = require("./bunlder");
const files_1 = require("./files");
const utils_1 = require("./utils");
class ParcelPlugin {
    constructor(logger, conf, emitter) {
        this.preprocessor = (content, file, next) => {
            this.log.debug(`Adding ${file.originalPath} to ${this.workspace().entryFile.path}`);
            this.addFile(file).then(() => {
                if (this.karmaConf.logLevel === this.karmaConf.LOG_DEBUG) {
                    next(null, `console.log("${file.path}");`);
                }
                else {
                    next(null, `/* ${file.path} */`);
                }
            });
        };
        this.middleware = (req, resp, next) => {
            const originalUrl = req.url;
            const index = originalUrl.indexOf(".karma-parcel/");
            if (index > 0) {
                const newUrl = `/${originalUrl.substring(index + 1)}`;
                req.url = newUrl;
                this.log.debug(`Serving ${originalUrl} as ${newUrl}`);
                return this.bundleMiddleware(req, resp, next);
            }
            this.log.debug(`${req.url} can not be served by parcel:middleware`);
            next();
        };
        this.log = logger;
        this.karmaConf = conf;
        this.emitter = emitter;
        this._workspace = null;
        this._middleware = null;
    }
    workspace() {
        if (!this._workspace) {
            this._workspace = files_1.createWorkspaceSync();
            this.log.debug(`Created workspace: ${this._workspace.dir}`);
        }
        return this._workspace;
    }
    addFile(file) {
        const path = file.originalPath || file;
        return this.workspace().entryFile.add(path);
    }
    isWatching() {
        return this.karmaConf.autoWatch || false;
    }
    bundleMiddleware(req, resp, next) {
        if (!this._middleware) {
            const bundler = this.createBundler();
            this._middleware = bundler.middleware();
        }
        return this._middleware(req, resp, next);
    }
    createBundler() {
        const { entryFile, dir, bundleFile } = this.workspace();
        this.log.debug(`Creating bundler for ${entryFile.toString()}`);
        return bunlder_1.createBundler(entryFile.path, Object.assign({ detailedReport: false, logLevel: 1, outDir: dir }, this.karmaConf.parcelConfig, { 
            // config that should not be overriden
            outFile: bundleFile, publicUrl: "/karma-parcel", watch: this.isWatching(), hmr: false, autoinstall: false }), utils_1.throttle(() => {
            this.log.debug(`Wrote bundled test: ${bundleFile}`);
            this.emitter.refreshFile(bundleFile);
        }, 500));
    }
}
exports.ParcelPlugin = ParcelPlugin;
function createParcelPlugin(logger, config, emitter) {
    const parcelLoger = logger.create("parcel");
    return new ParcelPlugin(parcelLoger, config, emitter);
}
exports.createParcelPlugin = createParcelPlugin;
createParcelPlugin.$inject = ["logger", "config", "emitter"];
