"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// eslint-env mocha
const assert = require("assert");
const fs = require("fs");
const os = require("os");
const path = require("path");
const rimraf = require("rimraf");
const sinon = require("sinon");
const util_1 = require("util");
const files_1 = require("./files");
const mkdirp = require("mkdirp");
describe("files", () => {
    afterEach(() => sinon.restore());
    it("exports createWorkspace", () => {
        assert.ok(files_1.createWorkspaceSync);
    });
    describe("createWorkspaceSync", () => {
        const cwd = os.tmpdir();
        beforeEach(() => {
            // make sure no karma-parcel folder exists
            return util_1.promisify(rimraf)(path.join(cwd, ".karma-parcel")).then(() => {
                sinon.stub(process, "cwd").returns(cwd);
            });
        });
        it("returns a Workspace", () => {
            const workspace = files_1.createWorkspaceSync();
            assert.ok(workspace);
            assert.equal(workspace.toString(), "Workspace()");
        });
        it("creates a directory named .karma-parcel in process.cwd()", () => {
            files_1.createWorkspaceSync();
            return util_1.promisify(fs.stat)(path.join(cwd, ".karma-parcel"));
        });
        it("removes previously created directory", () => {
            const dir = path.join(cwd, ".karma-parcel");
            const fileInDir = path.join(dir, "xxx");
            mkdirp.sync(dir);
            return util_1.promisify(fs.writeFile)(fileInDir, "xxx")
                .then(() => files_1.createWorkspaceSync())
                .then(() => util_1.promisify(fs.stat)(fileInDir))
                .then(stat => assert.fail(`Expected ${fileInDir} not to exists`), e => assert.ok(e));
        });
        it("creates an empty index.js in .karma-parcel", () => {
            files_1.createWorkspaceSync();
            return util_1.promisify(fs.stat)(path.join(cwd, ".karma-parcel", "index.js"));
        });
        describe("Workspace", () => {
            it("exports the created dir as .dir", () => {
                const workspace = files_1.createWorkspaceSync();
                assert.ok(workspace.dir);
                assert.equal(workspace.dir, path.join(cwd, ".karma-parcel"));
            });
            it("exports an EntryFile ", () => {
                const workspace = files_1.createWorkspaceSync();
                assert.ok(workspace.entryFile);
                assert.ok(workspace.entryFile.toString().indexOf("EntryFile(") === 0);
            });
        });
    });
    describe(files_1.EntryFile.name, () => {
        function workspace(dir = os.tmpdir()) {
            return util_1.promisify(rimraf)(path.join(dir, ".karma-parcel")).then(() => {
                sinon.stub(process, "cwd").returns(dir);
                return files_1.createWorkspaceSync();
            });
        }
        it("allows addition of files", () => {
            return workspace().then(w => {
                const file = w.entryFile;
                return file
                    .add("/path/to/file")
                    .then(() => util_1.promisify(fs.readFile)(file.path))
                    .then(cont => {
                    assert.equal(cont.toString("utf8"), `import "../../path/to/file";`);
                });
            });
        });
        it("adds the files relative to the dir", () => {
            const tmpDir = path.join(os.tmpdir(), "karma-parcel-tmp");
            return workspace(tmpDir)
                .catch(err => {
                if (err.code === "EEXIST") {
                    return;
                }
                throw err;
            })
                .then(() => {
                const file = files_1.createWorkspaceSync().entryFile;
                return file
                    .add("/path/other/file")
                    .then(() => util_1.promisify(fs.readFile)(file.path))
                    .then(cont => {
                    assert.equal(cont.toString("utf8"), `import "../../../path/other/file";`);
                });
            });
        });
        it("adds './' to the imported file if needed", () => {
            const tmpDir = path.join(os.tmpdir(), "karma-parcel-tmp");
            return workspace(tmpDir)
                .catch(err => {
                if (err.code === "EEXIST") {
                    return;
                }
                throw err;
            })
                .then(() => {
                const { entryFile: file, dir } = files_1.createWorkspaceSync();
                return file
                    .add(path.join(dir, "path/other/file"))
                    .then(() => util_1.promisify(fs.readFile)(file.path))
                    .then(cont => {
                    assert.equal(cont.toString("utf8"), `import "./path/other/file";`);
                });
            });
        });
    });
});
