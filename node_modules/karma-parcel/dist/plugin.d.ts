import { RequestHandler } from "express-serve-static-core";
import { ParcelOptions } from "parcel-bundler";
import { createWorkspaceSync } from "./files";
import { Callback, KarmaFile, KarmaLoggerFactory, Logger } from "./types";
import karma = require("karma");
export declare type Workspace = ReturnType<typeof createWorkspaceSync>;
export declare type KarmaConf = karma.ConfigOptions & karma.Config & {
    parcelConfig?: Pick<ParcelOptions, "cacheDir" | "detailedReport" | "logLevel">;
};
export interface KarmaServer extends karma.Server {
    refreshFile(file: string): void;
}
export declare class ParcelPlugin {
    private log;
    private karmaConf;
    private emitter;
    private _workspace;
    private _middleware;
    constructor(logger: Logger, conf: KarmaConf, emitter: KarmaServer);
    workspace(): Workspace;
    addFile(file: KarmaFile | string): Promise<void>;
    isWatching(): boolean;
    preprocessor: (content: string, file: KarmaFile, next: Callback<any>) => void;
    middleware: RequestHandler;
    private bundleMiddleware;
    private createBundler;
}
export declare function createParcelPlugin(logger: KarmaLoggerFactory, config: KarmaConf, emitter: KarmaServer): ParcelPlugin;
export declare namespace createParcelPlugin {
    var $inject: string[];
}
