"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// eslint-env mocha
const assert = require("assert");
const sinon = require("sinon");
const framework_1 = require("./framework");
function fakePlugin({ middleware, bundleFile = "/path/to/bundle" }) {
    return {
        workspace() {
            return { bundleFile };
        },
        middleware() {
            return middleware;
        },
        isWatching() {
            return false;
        }
    };
}
describe("framework", () => {
    let logger;
    beforeEach(() => {
        logger = {
            create: sinon.stub().returns({
                info: sinon.stub(),
                debug: sinon.stub()
            })
        };
    });
    afterEach(() => sinon.restore());
    describe("createParcelFramework", () => {
        it("adds the bundle file to the fileList", done => {
            const configFiles = [];
            const bundleFile = "/path/to/bundle.parcel";
            const plugin = fakePlugin({ bundleFile });
            framework_1.createParcelFramework(logger, { files: configFiles }, plugin);
            setImmediate(() => {
                assert.deepEqual(configFiles, [
                    {
                        included: true,
                        pattern: bundleFile,
                        served: false,
                        watched: false
                    }
                ]);
                done();
            });
        });
        it("adds the parcel middleware if middleware does not exists", done => {
            const conf = {
                configFiles: []
            };
            const middleware = sinon.stub();
            const plugin = fakePlugin({ middleware, bundleFile: "/path" });
            framework_1.createParcelFramework(logger, conf, plugin);
            setImmediate(() => {
                assert.deepEqual(conf.middleware, ["parcel"]);
                done();
            });
        });
        it("mutates the existing middleware array", done => {
            const conf = {
                middleware: ["middleware1"]
            };
            const middleware = sinon.stub();
            const plugin = fakePlugin({ middleware, bundleFile: "/path" });
            framework_1.createParcelFramework(logger, conf, plugin);
            setImmediate(() => {
                assert.deepEqual(conf.middleware, ["middleware1", "parcel"]);
                done();
            });
        });
        it("makes sure that the middleware conf is an array", done => {
            const conf = {
                middleware: "middleware1"
            };
            const middleware = sinon.stub();
            const plugin = fakePlugin({ middleware, bundleFile: "/path" });
            framework_1.createParcelFramework(logger, conf, plugin);
            setImmediate(() => {
                assert.deepEqual(conf.middleware, ["middleware1", "parcel"]);
                done();
            });
        });
    });
});
