"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const os = require("os");
const path = require("path");
const util_1 = require("util");
const mkdirp = require("mkdirp");
const rimraf = require("rimraf");
class TmpFile {
    constructor(dir, name) {
        this.done = Promise.resolve();
        this.dir = dir;
        this.name = name;
        this.path = path.join(this.dir, this.name);
    }
    write(content) {
        this.done = this.done.then(() => util_1.promisify(fs.writeFile)(this.path, content));
        return this.done;
    }
}
function createBundleFile() {
    const bundleFile = new TmpFile(os.tmpdir(), `karma-parcel-${Date.now()}.js.parcel`);
    if (fs.existsSync(bundleFile.path)) {
        return bundleFile;
    }
    fs.writeFileSync(bundleFile.path, "");
    return bundleFile;
}
exports.createBundleFile = createBundleFile;
class EntryFile extends TmpFile {
    constructor(dir) {
        super(dir, "entry.js");
        this.files = [];
    }
    add(path) {
        this.files.push(path);
        const content = this.files
            .map(f => `import "${this.importPath(f)}";`)
            .join("\n");
        return this.write(content);
    }
    importPath(file) {
        const relativePath = path.relative(this.dir, file).replace(/\\/g, "/");
        if (relativePath.indexOf(".") !== 0) {
            return `./${relativePath}`;
        }
        return relativePath;
    }
    toString() {
        return `EntryFile(${this.path}, imports: ${this.files.length})`;
    }
}
exports.EntryFile = EntryFile;
class Workspace {
    constructor(dir) {
        this.dir = dir;
        this.bundleFile = path.join(dir, "index.js");
        this.entryFile = new EntryFile(dir);
    }
    toString() {
        return "Workspace()";
    }
}
function createWorkspaceSync() {
    const dir = path.join(process.cwd(), ".karma-parcel");
    rimraf.sync(dir);
    const workspace = new Workspace(dir);
    mkdirp.sync(workspace.dir);
    fs.writeFileSync(workspace.bundleFile, "");
    return workspace;
}
exports.createWorkspaceSync = createWorkspaceSync;
